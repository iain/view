= View

Automatic viewer. Very configurable. Very flexible. Very alpha (for now).

It is made for displaying stuff in views. This can be very handy for DSLs that create views.
Some of those DSLs are coming soon to a rubygem near you!

But first, the view!

== Usage

Use it from your views:

  = view @post

View will try to figure out what the most logical way is to present the object you passed in.
If the @post object has a title for instance, it will use that.

See the auto formatter for more information.

You can use view anywhere you like:

  puts View.to_s(@post)

But beware that for many formatters, a reference to the template is required.
It is a helper for the view part of your application after all.

== Options

View will automatically try to choose the proper formatter. You can specify a formatter yourself:

  = view @post.created_at, :as => :date

You can add a block to specify your own behavior. The parsed value is passed in as a block-variable.

  = view @post.author do |author|
    = link_to author, @post.author

Most formatters pass their options down to the method they use, such as the image formatter:

  = view @user.avatar, :as => :image, :size => "40x40", :class => "avatar"

== Examples

There are many formatters included (18 and counting), but here are some interesting use cases of some of them.

  # Options are passed to the helper methods:
  = view @post, :as => :link, :method => :delete, :confirm => "are you sure?"

  # Renders a link to the edit_page of the post:
  = view @post, :as => :link, :path => [ :edit ]

  # Renders a sentence of links:
  = view Post.all, :each => { :as => :link }

  # When using paperclip, renders the image:
  = view @project.logo, :as => :image

  # Renders "yes" or "no" (with I18n support!)
  = view @user.admin?

See the formatters in lib/views/formatters to see their full documentation.

== Adding formatters

You can add a formatter by inheriting from View::Formatter.
The only method you need to implement is the to_s method.

In the class you have access to the following methods:

* value: the object passed in
* options: a filtered hash of options
* all_options: the unfiltered hash
* template: call methods like link_to on this

If you wanted a uppercase formatter for example, you could do this:

  class Uppercase < View::Formatter

    def to_s
      value.to_s.upcase
    end

  end

The name of the formatter is automatically infered from the name of the class.

You can use the .as method to specify a different name.

  class Foo < View::Formatter
    as :bar
    # etc ...
  end

You can control which options are allowed, by adding reserved options:

  class Foo < View::Formatter
    self.reserved_options = [ :foo, :bar ]
  end

Now, the options method will return the options passed by the user, minus foo and bar.
To use them, in your code, use the all_options method.
This is done to easily pass the options to another method, without cluttering:

  class Paragraph < View::Formatter
    def to_s
      template.content_tag(:p, value.to_s, options)
    end
  end

To more tightly control which options are allowed, specify the allowed_options.

  class Size < View::Formatter
    self.allowed_options = [ :separator, :delimiter, :precision ]
    def to_s
      template.number_to_human_size(value, options)
    end
  end

You can use the existing formatters as examples.

== Configuration:

See lib/view.rb for information on configuration.

== Installation

=== Rails 3

  In Rails 3, just add it to your Gemfile:

    gem 'view'

  And run <tt>bundle install</tt> to get it.

=== Rails 2

  In Rails 2, add it to app/environment.rb:

    config.gem 'view'

  And run <tt>rake gems:install</tt> to get it.

  Afterwards, include the helper mehtod manually, by editing app/helpers/application_helper.rb:

    module ApplicationHelper
      include View::Helper
    end

  Caution: some helpers may use new helper methods from Rails 3 and might not work in Rails 2.

== Contributing

Yes please! You know the drill: fork, commit, pull request, profit!

== License

Copyright 2010 Iain Hecker (iain@iain.nl), released under the MIT License.
